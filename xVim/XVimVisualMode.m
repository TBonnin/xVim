//
//  Created by Morris on 12-1-1.
//  Copyright (c) 2011å¹´ http://warwithinme.com . All rights reserved.
//

#import "XVimMode.h"
#import "XGlobal.h"
#import "XTextViewBridge.h"
#import "vim.h"

@interface XVimVisualModeHandler()
{
@private
    BOOL isLineMode;
    BOOL dontCheckSel;
    
    NSInteger selectionStart;
    NSInteger selectionEnd; // selectionStart and selectionEnd are the 
                            // same if selection is only one char
    
    NSInteger count;
    unichar cmd;
    NSTextView* hijackedView;
}
-(void) switchToMode:(VimMode) mode;
@end

@implementation XVimVisualModeHandler
-(void) reset 
{
    dontCheckSel = NO;
    cmd = 0;
    count = 0;
    selectionStart = 0;
    selectionEnd   = 0;
}
-(void) enterWith:(VimMode)submode 
{ 
    isLineMode = (submode == VisualLineMode);
    
    NSTextView* view      = [[controller bridge] targetView];
    NSRange     selection = [view selectedRange];
    NSUInteger  length    = [[view textStorage] length];
    
    selectionStart = selection.location;
    selectionEnd   = selectionStart;
    
    if (selection.length == 0)
    {        
        // We enter Visual Mode by pressing v,V
        if (selection.location < length)
        {
            // Not at the bottom of file, select the char under the caret.
            [view setSelectedRange:NSMakeRange(selectionStart, 1)];
        }
        
    } else if (selection.length == 1)
    {
        // In Xcode, the user can select a token which is generated by the editor
        // If the selection is a token, switch to insert mode!
        NSString* selStr = [[view string] substringWithRange:selection];
        if ([selStr characterAtIndex:0] == 0xFFFC)
        {
            [controller switchToMode:InsertMode subMode:NoSubMode];
            return;
        }
    } else
    {
        NSInteger trackingSelStart = [controller getTrackingSel];
        if (trackingSelStart != -1)
        {            
            NSInteger end = selection.location + selection.length;
            if (end == trackingSelStart)
            {
                selectionStart = trackingSelStart - 1;
                selectionEnd   = selection.location;
            } else {
                selectionEnd   = end - 1;
            }
        }
    }
}

-(NSArray*) selectionChangedFrom:(NSArray*)oldRanges to:(NSArray*)newRanges
{
    if (dontCheckSel) { return newRanges; }
    
    if ([[newRanges objectAtIndex:0] rangeValue].length == 0)
    {
        [controller switchToMode:NormalMode subMode:NoSubMode];
    }
    
    return newRanges;
}

-(void) switchToMode:(VimMode) mode
{
    NSRange idx = NSMakeRange(selectionStart, 0);
    [controller switchToMode:mode subMode:NoSubMode];
    [hijackedView setSelectedRange:idx];
    [hijackedView scrollRangeToVisible:idx];
}

-(BOOL) processKey:(unichar)c modifiers:(NSUInteger)flags
{
    dontCheckSel = YES;
    
    hijackedView = [[controller bridge] targetView];
    NSString* string    = [[hijackedView textStorage] string];
    NSRange   selection = [hijackedView selectedRange];
    NSInteger caretIdx  = selectionEnd;
    
    BOOL handled = NO;
    
    // 1. Check number.
    if (cmd == 0 && c >= '0' && c <= '9')
    {
        // The number adds to firstCount if operator is 0.
        // Otherwise it adds to secondCount.
        if (count == -1)
        {
            if (c != '0') 
            { 
                count = c - '0';
                handled = YES;
            }
        } else {
            count = count * 10 + c - '0';
            handled = YES;
        }
    }
    
    if (handled == YES) {
        dontCheckSel = NO;
        return YES;
    }
    
    VimMode mode = NoSubMode;
    
    // 2. Commands
    switch (c) {
        case 'y':
        case 'd':
        case 'x':
        case NSDeleteCharacter:
        case 'c':
            [controller yank:string 
                   withRange:[hijackedView selectedRange] 
                   wholeLine:isLineMode];
            mode = NormalMode;
            if (c != 'y')
            {
                [hijackedView insertText:@"" 
                        replacementRange:selection];
                if (c == 'c') {
                    mode = InsertMode;
                }
            }
            break;
        case 'u':
        case 'U':
        case '~':
        {
            NSMutableString* subString = [NSMutableString stringWithString:[string substringWithRange:selection]];
            NSRange r = {0,1};
            
            if (c == '~') {
                for (; r.location < selection.length; ++r.location) 
                {
                    unichar c = [subString characterAtIndex:r.location];
                    if (c >= 'a' && c <= 'z')
                        c = c + 'A' - 'a';
                    else if (c >= 'A' && c <= 'Z')
                        c = c + 'a' - 'A';
                    [subString replaceCharactersInRange:r 
                                             withString:[NSString stringWithCharacters:&c 
                                                                                length:1]];
                }
            }
            
            [hijackedView insertText:(c == '~' ? subString : 
                                          (c == 'u' ? [subString lowercaseString] : 
                                                      [subString uppercaseString]))
                    replacementRange:selection]; 
            mode = NormalMode;
        }
        case XEsc:
            mode = NormalMode;
            break;
        case 'o':
        case 'O':
        {
            NSInteger temp = selectionStart;
            selectionStart = selectionEnd;
            selectionEnd   = temp;
        }
            break;
            
        case 'Y':
        case 'D':
        case 'C':
        case 'X':
        case 'r':
        case 'R':
        case 's':
        case 'S':
        case 'J':
        case 'p':
            break;
            
        case 'w':
        case 'W':
        case 'b':
        case 'B':
        case 'e':
        case 'E':
        case 'h':
        case 'j':
        case 'k':
        case 'l':
            break;
            
        case 'v':
        case 'V':
            break;
    }
    
    if (mode != NoSubMode) {
        NSRange idx = NSMakeRange(caretIdx, 0);
        [controller switchToMode:mode subMode:NoSubMode];
        [hijackedView setSelectedRange:idx];
        [hijackedView scrollRangeToVisible:idx];
    }
    
    count = 0;
    return YES;
}
@end
